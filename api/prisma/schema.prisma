generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  OWNER
  ADMIN
  MEMBER
  CUSTOMER
  BILLING
}

enum AccountProvider {
  GITHUB
  GOOGLE
}

enum SubscriptionType {
  TRIAL
  BASIC
  PRO
  BUSINESS
}

enum TokenType {
  PASSWORD_RECOVER
}

model User {
  id           String    @id @default(uuid())
  name         String?
  email        String    @unique
  passwordHash String?   @map("password_hash")
  avatarUrl    String?   @map("avatar_url")
  birthday     DateTime?

  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  preferredGateway String?

  tokens             Token[]
  accounts           Account[]
  invites            Invite[]
  member_on          Member[]
  owns_organizations Organization[]
  subscriptions      Subscription[]

  @@map("users")
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("tokens")
}

model Account {
  id                String          @id @default(uuid())
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@unique([provider, userId])
  @@map("accounts")
}

model Invite {
  id        String   @id @default(uuid())
  email     String
  role      Role
  createdAt DateTime @default(now()) @map("created_at")

  author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId String? @map("author_id")

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  @@unique([email, organizationId])
  @@index([email])
  @@map("invites")
}

model Member {
  id   String @id @default(uuid())
  role Role   @default(MEMBER)

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@unique([organizationId, userId])
  @@map("members")
}

model Organization {
  id                        String  @id @default(uuid())
  name                      String
  slug                      String  @unique
  domain                    String? @unique
  shouldAttachUsersByDomain Boolean @default(false) @map("should_attach_users_by_domain")
  currency                  String  @default("BRL")

  avatarUrl String?  @map("avatar_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String @map("owner_id")

  invites             Invite[]
  members             Member[]
  integrations        Integration[]
  gatewayTransactions GatewayTransaction[]
  products            Product[]
  notifications       Notification[]
  gatewayConfigs      GatewayConfig[]

  subscriptions Subscription[]
  customers     Customer[]

  @@index([slug])
  @@map("organizations")
}

model Integration {
  id        String   @id @default(uuid())
  name      String
  config    Json
  createdAt DateTime @default(now()) @map("created_at")

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  @@unique([name, organizationId])
  @@map("integrations")
}

model Notification {
  id        String   @id @default(uuid())
  type      String
  message   String
  isRead    Boolean  @default(false)
  funnelId  String?
  createdAt DateTime @default(now()) @map("created_at")

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  @@index([organizationId])
  @@index([funnelId])
  @@map("notifications")
}

model Subscription {
  id        String           @id @default(uuid())
  type      SubscriptionType @default(TRIAL)
  startDate DateTime
  endDate   DateTime?
  isActive  Boolean          @default(true)
  createdAt DateTime         @default(now()) @map("created_at")

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String?

  @@map("subscriptions")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  currency    String
  imageUrls   String[] @map("image_urls")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  gatewayTransactions GatewayTransaction[]

  @@map("products")
}

model Customer {
  id        String   @id @default(uuid())
  name      String
  document  String   @unique
  email     String?
  phone     String?
  createdAt DateTime @default(now()) @map("created_at")

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  transactions GatewayTransaction[]
}

enum GatewayEngine {
  PAYMAKER
  HOPI
  SHIELD
}

model Gateway {
  id          String        @id @default(uuid())
  name        String
  provider    String        @unique
  domain      String        @unique
  engine      GatewayEngine
  description String?
  iconUrl     String?
  isGlobal    Boolean       @default(false)
  createdAt   DateTime      @default(now()) @map("created_at")

  configs GatewayConfig[]
}

model GatewayConfig {
  id String @id @default(uuid())

  description    String?
  apiKey         String   @map("api_key")
  secretKey      String   @map("secret_key")
  publicKey      String?  @map("public_key")
  webhookSecret  String?  @map("webhook_secret")
  installmentFee Float?
  createdAt      DateTime @default(now()) @map("created_at")

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  gatewayTransactions GatewayTransaction[]
  Gateway             Gateway              @relation(fields: [gatewayId], references: [id])
  gatewayId           String

  @@unique([organizationId])
  @@map("gateway_configs")
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

enum PaymentMethod {
  PIX
  CREDIT_CARD
  BOLETO
}

model GatewayTransaction {
  id String @id @default(uuid())

  amount    Float
  currency  String
  status    TransactionStatus @default(PENDING)
  method    PaymentMethod
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @default(now()) @updatedAt @map("updated_at")

  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId String?  @map("product_id")

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  gatewayConfig   GatewayConfig @relation(fields: [gatewayConfigId], references: [id], onDelete: Cascade)
  gatewayConfigId String        @map("gateway_config_id")
  Customer        Customer?     @relation(fields: [customerId], references: [id])
  customerId      String?

  @@map("gateway_transactions")
}
